apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

android {
    compileSdkVersion project.ext.compileSdkVersion
    defaultConfig {
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode 19
        versionName "2.4.8"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField("String", "MUX_PLUGIN_VERSION", "\"${versionName}\"")
        buildConfigField("String", "MUX_PLUGIN_NAME", "\"android-exoplayer-mux\"")
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        disable 'GradleCompatible'
        // exoplayer 2.8.1 workaround
        // https://github.com/google/ExoPlayer/issues/4234
        lintConfig file("../checker-framework-lint.xml")
    }
    sourceSets {
        r2_9_6 {
            java.srcDirs = ['./src/r2_9_6/java']
        }
        r2_9_6_ads {
            java.srcDirs = ['./src/r2_9_6/java']
        }
        r2_10_6 {
            java.srcDirs = ['./src/r2_10_6/java']
        }
        r2_10_6_ads {
            java.srcDirs = ['./src/r2_10_6/java']
        }
        r2_11_1 {
            java.srcDirs = ['./src/r2_11_1/java']
        }
        r2_11_1_ads {
            java.srcDirs = ['./src/r2_11_1/java']
        }
        r2_12_1 {
            java.srcDirs = ['./src/r2_12_1/java']
        }
        r2_12_1_ads {
            java.srcDirs = ['./src/r2_12_1/java']
        }
        r2_13_1 {
            java.srcDirs = ['./src/r2_13_1/java']
        }
        r2_13_1_ads {
            java.srcDirs = ['./src/r2_13_1/java']
        }
    }

    flavorDimensions 'api'

    productFlavors {
        r2_9_6 {
            dimension 'api'
        }
        r2_9_6_ads {
            dimension 'api'
        }
        r2_10_6 {
            dimension 'api'
        }
        r2_10_6_ads {
            dimension 'api'
        }
        r2_11_1 {
            dimension 'api'
        }
        r2_11_1_ads {
            dimension 'api'
        }
        r2_12_1 {
            dimension 'api'
        }
        r2_12_1_ads {
            dimension 'api'
        }
        r2_13_1 {
            dimension 'api'
        }
        r2_13_1_ads {
            dimension 'api'
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    build  {
        doLast {
            productFlavors.each {
                flavor ->
                    def versionName = flavor.name.replaceAll(/_/, ".")
                    if (!versionName.endsWith(".ads")) {
                        copy {
                            from "${buildDir}/outputs/aar/${project.name}-${flavor.name}-release.aar", "${buildDir}/outputs/mapping/${flavor.name}Release/mapping.txt"
                            into "${buildDir}/outputs/artifacts/"
                            rename("${project.name}-${flavor.name}-release.aar", "mux-${versionName}.aar")
                            rename("mapping.txt", "mapping-${versionName}.txt")
                            File aarFile = new File("${buildDir}/outputs/artifacts/mux-${versionName}.aar")
                            println "===++++ >>>>> ${aarFile.name} size = ${aarFile.size()}, exists ${aarFile.exists()}";
                            if ( aarFile.length() > 120000 ) {
                                // Fail
                                throw new GradleException(
                                        "${project.name}-${flavor.name}-release.aar exceed 120KB!");
                            }
                        }
                    }
            }
            dependencies {}
        }
    }
}

dependencies {
    implementation 'com.android.support:multidex:1.0.3'
    r2_9_6Api 'com.google.android.exoplayer:exoplayer:2.9.6'
    r2_9_6Api 'org.checkerframework:checker-qual:2.5.0'
    r2_9_6_adsApi 'com.google.android.exoplayer:exoplayer:2.9.6'
    r2_9_6_adsApi 'org.checkerframework:checker-qual:2.5.0'
    r2_10_6Api 'com.google.android.exoplayer:exoplayer:2.10.6'
    r2_10_6Api 'org.checkerframework:checker-qual:2.5.0'
    r2_10_6_adsApi 'com.google.android.exoplayer:exoplayer:2.10.6'
    r2_10_6_adsApi 'org.checkerframework:checker-qual:2.5.0'
    r2_11_1Api 'com.google.android.exoplayer:exoplayer:2.11.1'
    r2_11_1Api 'org.checkerframework:checker-qual:2.5.2'
    r2_11_1_adsApi 'com.google.android.exoplayer:exoplayer:2.11.1'
    r2_11_1_adsApi 'org.checkerframework:checker-qual:2.5.2'
    r2_12_1Api 'com.google.android.exoplayer:exoplayer:2.12.1'
    r2_12_1Api 'org.checkerframework:checker-qual:2.5.2'
    r2_12_1_adsApi 'com.google.android.exoplayer:exoplayer:2.12.1'
    r2_12_1_adsApi 'org.checkerframework:checker-qual:2.5.2'
    r2_13_1Api 'com.google.android.exoplayer:exoplayer:2.13.1'
    r2_13_1Api 'org.checkerframework:checker-qual:2.5.2'
    r2_13_1_adsApi 'com.google.android.exoplayer:exoplayer:2.13.1'
    r2_13_1_adsApi 'org.checkerframework:checker-qual:2.5.2'
    compileOnly 'com.google.ads.interactivemedia.v3:interactivemedia:3.9.0'
    compileOnly 'com.google.android.gms:play-services-ads:15.0.1'
    compileOnly 'com.google.android.gms:play-services-ads-identifier:15.0.1'
//    api files('libs/MuxCore.jar')
    api 'com.mux:com.mux.stats.muxcore:3.3.2'
}

afterEvaluate {
    android.libraryVariants.each { variant ->
        if (variant.buildType.name ==  "release") {

            def packageName = "com.mux.stats.sdk"
            def exoVersionName = variant.getFlavorName().replaceAll(/_/, ".")
            def outputDir = file("${buildDir}/outputs/publish/")

            def sourceJar = task "sourceJar${variant.name}" (type: Jar) {
                from android.sourceSets.main.java.srcDirs, android.sourceSets[variant.getFlavorName()].java.srcDirs
                destinationDir = outputDir
                baseName = packageName
                appendix = exoVersionName
                version = android.defaultConfig.versionName
                classifier = 'sources'
            }

            def javadocs = task "javadocs${variant.name}" (type: Javadoc) {
                source = [android.sourceSets.main.java.srcDirs,
                          android.sourceSets[variant.getFlavorName()].java.srcDirs,
                          "${buildDir}/generated/source/buildConfig/" +
                                  "${variant.getFlavorName()}/${variant.buildType.name}" +
                                  "/com/mux/stats/sdk/"
                ]
                classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
                classpath += configurations.compile
                classpath += variant.javaCompile.classpath
                destinationDir = file("${buildDir}/outputs/javadoc/${variant.name}")
                exclude '**/R.html', '**/R.*.html', '**/index.html'
                failOnError false
            }

            def javadocsJar = task "javadocsJar${variant.name}" (type: Jar) {
                dependsOn "javadocs${variant.name}"
                javadocs.destinationDir
                destinationDir = outputDir
                baseName = packageName
                appendix = exoVersionName
                version = android.defaultConfig.versionName
                classifier = 'javadoc'
            }

            task "signPom${variant.name}" (type: Sign) {
                dependsOn "generatePomFileForMaven${variant.name}Publication"
                sign project.file('build/publications/maven${exoVersionName}/pom-default.xml')
                outputs.upToDateWhen { false }
                // the signing plugin does not seem to notice
                // it when the publications folder with the
                // signature has been deleted. So we always
                // create a new signature
            }

            task "artofactPom${variant.name}" (type: Sign) {
                dependsOn "signPom${variant.name}"
                signatures.all {
                    def type = it.type
                    if (it.file.name.endsWith('.tar.gz.asc')) {
                        // Workaround in case a tar.gz file should published
                        type = 'tar.gz.asc'
                    } else if (it.type.equals('xml.asc')) {
                        // Set correct extension for signature of pom file
                        type = 'pom.asc'
                    }
                    artifact source: it.file, classifier: it.classifier ?: null, extension: type
                }
            }

            publishing {
                publications {
                    "maven${exoVersionName}"(MavenPublication) {
                        groupId 'com.mux'
                        artifactId "${muxArtifactId}-${exoVersionName}"
                        version mavenVersionName

                        artifact "${buildDir}/outputs/aar/${project.name}-${variant.getFlavorName()}-release.aar"
                        artifact sourceJar
                        artifact javadocsJar

                        pom {
                            name = 'Mux SDK'
                            description = 'Mux SDK wrapper for ExoPlayer, supported versions: ${exoVersionName} and greater'
                            url = 'https://github.com/muxinc/mux-stats-sdk-exoplayer'
                            licenses {
                                license {
                                    name = 'The Apache License, Version 2.0'
                                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                }
                            }
                            developers {
                                developer {
                                    id = 'mux-sdk'
                                    name = 'Mux Info'
                                    email = 'info@mux.com'
                                }
                            }
                            scm {
                                connection = 'scm:git:git@github.com/muxinc/mux-stats-sdk-exoplayer.git'
                                developerConnection = 'scm:git:git@github.com:muxinc/mux-stats-sdk-java.git'
                                url = 'https://github.com/muxinc/mux-stats-sdk-exoplayer'
                            }

                            withXml {
                                final dependenciesNode = asNode().appendNode('dependencies')

                                ext.addDependency = { Dependency dep, String scope ->
                                    println("Dependency: " + dep.name)
                                    if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified")
                                        return // ignore invalid dependencies

                                    final dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', dep.group)
                                    dependencyNode.appendNode('artifactId', dep.name)
                                    dependencyNode.appendNode('version', dep.version)
                                    dependencyNode.appendNode('scope', scope)

                                    if (!dep.transitive) {
                                        // If this dependency is transitive, we should force exclude all its dependencies them from the POM
                                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                                        exclusionNode.appendNode('groupId', '*')
                                        exclusionNode.appendNode('artifactId', '*')
                                    } else if (!dep.properties.excludeRules.empty) {
                                        // Otherwise add specified exclude rules
                                        final exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
                                        dep.properties.excludeRules.each { ExcludeRule rule ->
                                            exclusionNode.appendNode('groupId', rule.group ?: '*')
                                            exclusionNode.appendNode('artifactId', rule.module ?: '*')
                                        }
                                    }
                                }

                                // List all "compile" dependencies (for old Gradle)
                                configurations.compile.getDependencies().each { dep -> addDependency(dep, "compile") }
                                // List all "compileOnly" dependencies (for old Gradle)
                                configurations.compileOnly.getDependencies().each { dep -> addDependency(dep, "compile") }
                                // List all "api" dependencies (for new Gradle) as "compile" dependencies
                                configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
                                // List all "implementation" dependencies (for new Gradle) as "runtime" dependencies
                                configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }

                                configurations["${variant.getFlavorName()}Api"].allDependencies.each { dep ->
                                    addDependency(dep, "compile")
                                }
                            }
                        }
                    }
                }

                repositories {
                    maven {
                        credentials {
                            username jfrogUsername
                            password jfrogPassword
                        }
                        name "jfrog"
                        url "https://mux.jfrog.io/artifactory/default-maven-local/"
                    }
                }
            }

            signing {
                sign publishing.publications."maven${exoVersionName}"
            }
        }
    }
    tasks.publish.dependsOn tasks.assemble
}
